gift <- str_replace(string = gift,
pattern = "oose$",
replacement = "eese")
} else {
gift <- str_replace(string = gift,
pattern = "$",
replacement = "s")
}
return(gift)
}
pluralize_gift(xmas$Gift.Item)
purrr::map_chr(xmas$Gift.Item, pluralize_gift)
#pluralize_gift(xmas$Gift.Item)
purrr::map_chr(xmas$Gift.Item, pluralize_gift)
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words
pluralize_gift <- function(gift){
if(str_detect(string = gift,
pattern = "y$")) {
gift <- str_replace(string = gift,
pattern = "y$",
replacement = "ies")
} else if(str_detect(string = gift,
pattern = "oose$")) {
gift <- str_replace(string = gift,
pattern = "oose$",
replacement = "eese")
} else {
gift <- str_replace(string = gift,
pattern = "$",
replacement = "s")
}
return(gift)
}
#pluralize_gift(xmas$Gift.Item)
purrr::map_chr(xmas$Gift.Item, pluralize_gift)
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words
pluralize_gift <- function(gift){
if(str_detect(string = gift,
pattern = "y$")) {
gift <- str_replace(string = gift,
pattern = "y$",
replacement = "ies")
} else if(str_detect(string = gift,
pattern = "oose$")) {
gift <- str_replace(string = gift,
pattern = "oose$",
replacement = "eese")
} else {
gift <- str_replace(string = gift,
pattern = "$",
replacement = "s")
}
return(gift)
}
pluralize_gift(xmas$Gift.Item)
purrr::map_chr(xmas$Gift.Item, pluralize_gift)
#pluralize_gift(xmas$Gift.Item)
purrr::map_chr(xmas$Gift.Item, pluralize_gift)
str_detect("nerd", "^[aeiou].")
str_detect("alpha", "^[aeiou].")
str_detect("emu", "^[aeiou].")
str_detect("mom", "^[aeiou].")
num_str = c("one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve")
make_phrase <- function(num, num_word, item, verb, adjective, location) {
## Step 1: Replace NAs with blank strings
verb <- str_replace_na(verb, "")
## Step 2: Pluralize the gift if needed
## Items with numbers larger than 1 should be pluralized
## Single items starting with a vowel should have "an" in front
## All other single items should have "a" in front
vowel_start <- str_sub(item, 1, 1) %>% str_detect("^[aeiou].")
if (num > 1) {
item <- pluralize_gift(item)
} else if (vowel_start) {
num_word <- "an"
} else {
num_word <- "a"
}
glue::glue("{num_word} {adjective} {item} {verb} {location}") %>%
str_squish()
}
?english
??english
xmas <- xmas %>%
mutate(
day_str = map(Day, english::as.english()),
Full.Phrase = pmap_chr(make_phrase)
)
install.packages(english)
install.packages("english")
xmas <- xmas %>%
mutate(
day_str = map(Day, english::as.english()),
Full.Phrase = pmap_chr(make_phrase)
)
xmas <- xmas %>%
mutate(
day_str = english::as.english(Day),
Full.Phrase = pmap_chr(make_phrase)
)
xmas <- xmas %>%
mutate(
day_str = english::as.english(Day),
Full.Phrase = pmap_chr(.f = make_phrase)
)
?pmap_chr
knitr::opts_chunk$set(echo = TRUE)
# Packages for Functions
library(dplyr)
library(glue)
library(stringr)
library(purrr)
?pmap_chr
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
# Function that takes a noun and makes it plural
# Arguments -- gift -- A string or vector of strings
# Return -- A string or vector of strings with the pluralized words
pluralize_gift <- function(gift){
if(str_detect(string = gift,
pattern = "y$")) {
gift <- str_replace(string = gift,
pattern = "y$",
replacement = "ies")
} else if(str_detect(string = gift,
pattern = "oose$")) {
gift <- str_replace(string = gift,
pattern = "oose$",
replacement = "eese")
} else {
gift <- str_replace(string = gift,
pattern = "$",
replacement = "s")
}
return(gift)
}
make_phrase <- function(num, num_word, item, verb, adjective, location) {
## Step 1: Replace NAs with blank strings
verb <- str_replace_na(verb, "")
## Step 2: Pluralize the gift if needed
## Items with numbers larger than 1 should be pluralized
## Single items starting with a vowel should have "an" in front
## All other single items should have "a" in front
vowel_start <- str_sub(item, 1, 1) %>% str_detect("^[aeiou].")
if (num > 1) {
item <- pluralize_gift(item)
} else if (vowel_start) {
num_word <- "an"
} else {
num_word <- "a"
}
glue::glue("{num_word} {adjective} {item} {verb} {location}") %>%
str_squish()
}
xmas <- xmas %>%
mutate(
day_str = english::as.english(Day),
Full.Phrase = pmap(.l = list(Day,
day_str,
Gift.Item,
Verb,
Adjective,
Location),
.f = make_phrase)
)
make_phrase <- function(num, num_word, item, verb, adjective, location) {
## Step 1: Replace NAs with blank strings
verb <- str_replace_na(verb, "")
## Step 2: Pluralize the gift if needed
## Items with numbers larger than 1 should be pluralized
## Single items starting with a vowel should have "an" in front
## All other single items should have "a" in front
vowel_start <- str_sub(item, 1, 1) %>% str_detect("^[aeiou].")
if (num > 1) {
item <- pluralize_gift(item)
num_word <- english::as.english(num)
} else if (vowel_start) {
num_word <- "an"
} else {
num_word <- "a"
}
glue::glue("{num_word} {adjective} {item} {verb} {location}") %>%
str_squish()
}
xmas <- read.csv("https://www.dropbox.com/s/e584pryn8evm1gz/xmas.csv?dl=1")
xmas <- xmas %>%
mutate(
day_str = english::as.english(Day),
Full.Phrase = pmap(.l = list(Day,
day_str,
Gift.Item,
Verb,
Adjective,
Location),
.f = make_phrase)
)
make_phrase <- function(num, num_word, item, verb, adjective, location) {
## Step 1: Replace NAs with blank strings
verb <- str_replace_na(verb, "")
adjective <- str_replace_na(adjective, "")
location <- str_replace_na(location, "")
## Step 2: Pluralize the gift if needed
## Items with numbers larger than 1 should be pluralized
## Single items starting with a vowel should have "an" in front
## All other single items should have "a" in front
vowel_start <- str_sub(item, 1, 1) %>% str_detect("^[aeiou].")
if (num > 1) {
item <- pluralize_gift(item)
num_word <- english::as.english(num)
} else if (vowel_start) {
num_word <- "an"
} else {
num_word <- "a"
}
glue::glue("{num_word} {adjective} {item} {verb} {location}") %>%
str_squish()
}
xmas <- xmas %>%
mutate(
day_str = english::as.english(Day),
Full.Phrase = pmap(.l = list(Day,
day_str,
Gift.Item,
Verb,
Adjective,
Location),
.f = make_phrase)
)
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
for(i in line:1){
if(i == 1) {
print(dataset$phrase_col[1])
}
# Step 1: Setup the intro line
num_word <- english::as.english(line)
intro <- glue::glue("On the {num_word} day of Christmas")
# Step 2: Sing the gift phrases
phrase <- dataset$phrase_col[line]
lover <- "my true love gave to me, "
## put it together
print(paste(intro, lover, sep = ", "))
print(phrase)
}
}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
for(i in line:1){
if(i == 1) {
print(dataset$phrase_col[1])
}
# Step 1: Setup the intro line
num_word <- english::as.english(line)
intro <- glue::glue("On the {num_word} day of Christmas")
# Step 2: Sing the gift phrases
phrase <- dataset$phrase_col[where(line == i)]
lover <- "my true love gave to me, "
## put it together
print(paste(intro, lover, sep = ", "))
print(phrase)
}
}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
for(i in line:1){
if(i == 1) {
print(dataset$phrase_col[where(Day == line)])
}
# Step 1: Setup the intro line
num_word <- english::as.english(line)
intro <- glue::glue("On the {num_word} day of Christmas")
# Step 2: Sing the gift phrases
phrase <- dataset$phrase_col[where(Day == line)]
lover <- "my true love gave to me, "
## put it together
print(paste(intro, lover, sep = ", "))
print(phrase)
}
}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_line <- function(dataset, line, phrase_col){
for(i in line:1){
if(i == 1) {
print(dataset$phrase_col[where(Day == line)])
}
# Step 1: Setup the intro line
num_word <- english::as.english(line)
intro <- glue::glue("On the {num_word} day of Christmas")
# Step 2: Sing the gift phrases
phrase <- dataset$phrase_col[where(Day == line)]
lover <- "my true love gave to me, "
## put it together
print(paste(intro, lover, sep = ", "))
print(phrase)
}
}
sing_line(xmas,
num = 2,
phrase_col = Full.Phrase)
sing_line(xmas,
line = 2,
phrase_col = Full.Phrase)
knitr::opts_chunk$set(echo = TRUE)
# Packages for Functions
library(dplyr)
library(glue)
library(stringr)
library(purrr)
?where
knitr::opts_chunk$set(echo = TRUE)
# Packages for Functions
library(tidyselect)
library(dplyr)
library(glue)
library(stringr)
library(purrr)
pluralize_gift("booby")
clear
knitr::opts_chunk$set(echo = TRUE)
# Packages for Functions
library(dplyr)
library(glue)
library(stringr)
library(purrr)
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
if(line == 1) {
return()
}
# Step 1: Setup the intro line
num_word <- line
intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me,")
# Step 2: Sing the gift phrases
phrases <- dataset %>%
pull({{phrase_col}})
phrase = phrases[line]
## put it together
print(intro)
print(phrase)
return(sing_day(dataset, line - 1, phrase_col))
}
sing_day(xmas,
num = 2,
phrase_col = Full.Phrase)
sing_day(xmas,
line = 2,
phrase_col = Full.Phrase)
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
if(line == 1) {
return()
}
# Step 1: Setup the intro line
num_word <- line
intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me,")
# Step 2: Sing the gift phrases
phrases <- dataset %>%
pull({{phrase_col}})
phrase <- phrases[line]
## put it together
print(intro)
print(phrase)
}
sing_day(xmas,
line = 2,
phrase_col = Full.Phrase)
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
if(line == 1) {
return()
}
# Step 1: Setup the intro line
num_word <- line
intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me,")
# Step 2: Sing the gift phrases
phrases <- dataset %>%
pull({{phrase_col}})
phrase <- glue::glue("{phrases[line]}")
## put it together
print(intro)
print(phrase)
}
sing_day(xmas,
line = 2,
phrase_col = Full.Phrase)
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
if(line == 1) {
return()
}
# Step 1: Setup the intro line
num_word <- english::ordinal(line)
intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me,")
# Step 2: Sing the gift phrases
phrases <- dataset %>%
pull({{phrase_col}})
phrase <- glue::glue("{phrases[line]}")
## put it together
print(intro)
print(phrase)
}
sing_day(xmas,
line = 2,
phrase_col = Full.Phrase)
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
# Step 1: Setup the intro line
num_word <- english::ordinal(line)
intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me,")
# Step 2: Sing the gift phrases
phrases <- dataset %>%
pull({{phrase_col}})
phrase <- glue::glue("{phrases[line]}")
## put it together
print(intro)
print(phrase)
}
sing_line <- function(dataset, num, phrase_col) {
for(i in num:i) {
if(i == 1) {
if(num > 1) {
print("and {phrase_col[1]}")
return()
} else {
sing_day(dataset, 1, phrase_col)
return()
}
} else {
print(sing_day(dataset, i, phrase_col))
}
}
}
sing_line(xmas,
num = 2,
phrase_col = Full.Phrase)
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- line -- The number of the line for the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the gift phrases
# Return -- A string singing the line of the song with all gifts for the given day.
sing_day <- function(dataset, line, phrase_col){
# Step 1: Setup the intro line
num_word <- english::ordinal(line)
intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me,")
# Step 2: Sing the gift phrases
phrases <- dataset %>%
pull({{phrase_col}})
phrase <- glue::glue("{phrases[line]}")
## put it together
print(intro)
print(phrase)
}
sing_line <- function(dataset, num, phrase_col) {
for(i in num:1) {
if(i == 1) {
if(num > 1) {
print("and {phrase_col[1]}")
return()
} else {
sing_day(dataset, 1, phrase_col)
return()
}
} else {
print(sing_day(dataset, i, phrase_col))
}
}
}
sing_line(xmas,
num = 2,
phrase_col = Full.Phrase)
sing_line(xmas,
num = 2,
phrase_col = xmas$Full.Phrase)
